pipeline {
    agent {
        node{
            label 'slave'
        }
    }
    
    environment {
        REMOTE_HOST = '3.74.74.152'
        REMOTE_USER = 'ubuntu'
        REMOTE_DIR = '/home/ubuntu/TML'
        HARBOR_USERNAME = 'admin'
        HARBOR_PASSWORD = 'Harbor12345'
        JFROG_URL = 'http://3.74.74.152:8081/artifactory'
        JFROG_REPO = 'imran-imran'
        JFROG_USERNAME = 'admin'
        JFROG_PASSWORD = 'Imran@123'
    }
    
    options {
        disableConcurrentBuilds()
        timestamps()
    }
    
    stages {
        stage('Check remote directory') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Checking remote directory contents..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "ls -la ${REMOTE_DIR}"
                    '''
                }
            }
        }
        
        stage('Build cpp and CTest') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Building and testing C++ code..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_DIR}/LAMP_LIFE_PREDICTION && \
                        mkdir -p build && \
                        cd build && \
                        cmake .. && \
                        make && \
                        cp ../LAMP.csv . && \
                        cp ../config.txt . && \
                        ctest --output-on-failure && \
                        echo 'Result of Code : ' && \
                        ./lamp_life_calculator"
                    '''
                }
            }
        }
        
        stage('Start JFrog Artifactory') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Starting JFrog..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "
                            sudo systemctl start postgresql &&
                            sudo systemctl is-active --quiet postgresql &&
                            echo 'Postgress database started successfully' || 
                            (echo 'Failed to start postgress database' && exit 1) &&
                            sudo systemctl start artifactory &&
                            sudo systemctl is-active --quiet artifactory &&
                            echo 'JFrog Artifactory started successfully' || 
                            (echo 'Failed to start JFrog Artifactory' && exit 1)
                        "
                    '''
                }
            }
        }
        stage('Upload to JFrog Artifactory') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Uploading build artifacts and test results to JFrog Artifactory..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_DIR}/LAMP_LIFE_PREDICTION/build && \
                        curl -u ${JFROG_USERNAME}:${JFROG_PASSWORD} -X PUT ${JFROG_URL}/${JFROG_REPO}/lamp_life_calculator/${BUILD_NUMBER}/ -T lamp_life_calculator && \
                        curl -u ${JFROG_USERNAME}:${JFROG_PASSWORD} -X PUT ${JFROG_URL}/${JFROG_REPO}/lamp_life_calculator/${BUILD_NUMBER}/ -T LAMP.csv && \
                        curl -u ${JFROG_USERNAME}:${JFROG_PASSWORD} -X PUT ${JFROG_URL}/${JFROG_REPO}/lamp_life_calculator/${BUILD_NUMBER}/ -T config.txt && \
                        curl -u ${JFROG_USERNAME}:${JFROG_PASSWORD} -X PUT ${JFROG_URL}/${JFROG_REPO}/lamp_life_calculator/${BUILD_NUMBER}/ -T Testing/Temporary/LastTest.log && \
                        echo 'Uploaded lamp_life_calculator, LAMP.csv, config.txt and LastTest.log'"
                        echo "Artifact upload process completed."
                    '''
                }
            }
        }
        
        
        stage('Create Podman image') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    script {
                        def buildStatus = sh(script: '''
                            echo "Starting Podman image build..."
                            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd ${REMOTE_DIR}/LAMP_LIFE_PREDICTION && \
                            rm -rf build && \
                            podman build -t lamp_life_calculator ."
                        ''', returnStatus: true)
                        
                        if (buildStatus == 0) {
                            echo "Podman image created successfully!"
                        } else {
                            error "Podman image build failed"
                        }
                    }
                }
            }
        }
        
        stage('Run Podman container') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Running Podman container..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "podman run --rm lamp_life_calculator:latest"
                        echo "Podman container run completed."
                    '''
                }
            }
        }
        
        stage('Start harbor containers') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Starting Harbor..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "cd harbor && sudo ./install.sh --with-trivy"
                        echo "Harbor Started..."
                    '''
                }
            }
        }
        
        stage('Upload Podman Image to Harbor Registry') {
            steps {
                sshagent(credentials: ['3.74.74.152']) {
                    sh '''
                        echo "Logging into Harbor registry..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "echo ${HARBOR_PASSWORD} | podman login --username ${HARBOR_USERNAME} --password-stdin ${REMOTE_HOST}:80"
                        
                        echo "Tagging and uploading image..."
                        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "podman tag lamp_life_calculator:latest ${REMOTE_HOST}:80/tmldtdc/models/lamp_life_calculator:latest && podman push ${REMOTE_HOST}:80/tmldtdc/models/lamp_life_calculator:latest --tls-verify=false"
                        
                        echo "Upload successful..."
                    '''
                }
            }
        }
    //   stage('Scan Harbor Image with Trivy') {
    //         steps {
    //             sshagent(credentials: ['3.74.74.152']) {
    //                 sh '''
    //                     echo "Triggering Trivy scan on uploaded image in Harbor..."
    //                     ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "
    //                         # Trigger a scan
    //                         curl -u '${HARBOR_USERNAME}:${HARBOR_PASSWORD}' -X POST 'http://${REMOTE_HOST}:80/api/v2.0/projects/tmldtdc/repositories/models%2Flamp_life_calculator/artifacts/latest/scan'
                            
    //                         # Wait for scan to complete
    //                         while true; do
    //                             status=$(curl -s -u '${HARBOR_USERNAME}:${HARBOR_PASSWORD}' -X GET 'http://${REMOTE_HOST}:80/api/v2.0/projects/tmldtdc/repositories/models%2Flamp_life_calculator/artifacts/latest/scan' | jq -r '.status')
    //                             if [ "$status" = "SUCCESS" ]; then
    //                                 echo "Scan completed successfully"
    //                                 break
    //                             elif [ "$status" = "ERROR" ]; then
    //                                 echo "Scan failed"
    //                                 exit 1
    //                             else
    //                                 echo "Scan in progress. Current status: $status"
    //                                 sleep 10
    //                             fi
    //                         done
                            
    //                         # Get scan results
    //                         echo "Retrieving scan results..."
    //                         curl -u '${HARBOR_USERNAME}:${HARBOR_PASSWORD}' -X GET 'http://${REMOTE_HOST}:80/api/v2.0/projects/tmldtdc/repositories/models%2Flamp_life_calculator/artifacts/latest/scan' | jq .
                            
    //                         # You can add more specific parsing of the results here if needed
    //                     "
    //                     echo "Harbor Trivy scan completed."
    //                 '''
    //             }
    //         }
    //     } 
        
    }
    
    post {
        always {
            echo "Build finished. Status: ${currentBuild.result}"
        }
        failure {
            echo "Build failed. Check the logs for details."
        }
        success {
            echo "Build completed successfully."
        }
    }
}
